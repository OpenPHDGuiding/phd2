#!/usr/bin/env bash

check_library_dependencies () (
    # Sanity check to make sure the final executable does not contain
    # any unwanted dylib dependencies.
    #
    # If a third party vendor library has an unexpected library load
    # path, or if the build somehow introduces a homebrew or macports
    # dylib dependency, the executable will run in the build
    # environment but not on the end user's machine.
    #
    # See calls to install_name_tool in CMakeLists.txt for how we
    # manage the camera vendor dylib paths.

    set -o pipefail
    grep_output=$(
        otool -L PHD2.app/Contents/MacOS/PHD2 | \
        grep -v \
             -e 'PHD2:$' \
             -e '@executable_path/\.\./Frameworks/' \
             -e '/usr/lib/.*\.dylib' \
             -e /System/Library/Frameworks/ \
             || :
    )
    if [[ $grep_output ]]; then
        echo "Unexpected dylib dependency!" >&2
        echo "$grep_output" >&2
        exit 1
    fi
)

do_repocheck=1
do_build=1
do_clean=1
branch=

while getopts "b:Cns" o; do
    case "${o}" in
        b)
            branch=$OPTARG
            ;;
        C)
            do_clean=
            ;;
        n)
            do_build=
            do_clean=
            ;;
        s)
            do_repocheck=
            ;;
    esac
done
shift $((OPTIND-1))

set -x
set -e

os=$(IFS=. read -r a b _ < <(sysctl -n kern.osproductversion); printf "%03d" "$a" "$b")

sonoma=014000

suffix=
if [[ $os > $sonoma || $os == $sonoma ]]; then
    suffix=-sonoma+
fi

D=$(cd $(dirname "$0"); /bin/pwd)

[[ -f $D/build.cfg ]] || {
    echo "missing build.cfg" >&2
    exit 1
}
. "$D"/build.cfg

# run from the top of the source tree (this script is in <top>/build/)
cd "$D"/..

repo_is_clean () {
    git update-index -q --refresh
    git diff-index --quiet HEAD --
}
if [[ $do_repocheck ]]; then
    if ! repo_is_clean; then
        echo "modified files are present" >&2
        exit 1
    fi
fi

if [[ $branch ]]; then
    git fetch -q
    git checkout -q "$branch"
    git pull -r -q
fi

SCPDST=${WWW_HOST}:${WWW_DIR}

V=$(perl -ne '
 /^\s*#\s*define\s+PHDVERSION[^"]+"([^"]*)/ && do { $v = $1; next LINE };
 /^\s*#\s*define\s+PHDSUBVER[^"]+"([^"]*)/ && do { $s = $1; print "$v$s"; exit }' phd.h)

[[ $V ]] || {
    echo "could not get version from phd.h!" >&2
    exit 1
}

if [[ $do_clean ]]; then
    rm -rf tmp
    ./run_cmake-osx
fi

cd tmp

ZIPFILE=PHD2-${V}-OSX-64${suffix}.zip

if [[ $do_build ]]; then
    rm -rf PHD2.app
    # worakaround for infrequent intermittent build failure when
    # translations are built in parallel -- build the translations
    # sequentially before runnning the rest of the build in parallel
    translation_targets=()
    while read -r locale; do
        translation_targets+=("${locale}_translation")
    done < <(
        find ../locale -name messages.po | awk -F/ '{print $3}'
    )
    make "${translation_targets[@]}"
    cores=$(sysctl -n hw.logicalcpu)
    make -j$cores

    check_library_dependencies

    zip -r "$ZIPFILE" PHD2.app
    chmod 644 "$ZIPFILE"
fi
