#!/usr/bin/env bash

check_library_dependencies () (
    # Sanity check to make sure the final executable does not contain
    # any unwanted dylib dependencies.
    #
    # If a third party vendor library has an unexpected library load
    # path, or if the build somehow introduces a homebrew or macports
    # dylib dependency, the executable will run in the build
    # environment but not on the end user's machine.
    #
    # See calls to install_name_tool in CMakeLists.txt for how we
    # manage the camera vendor dylib paths.

    set -o pipefail
    grep_output=$(
        otool -L PHD2.app/Contents/MacOS/PHD2 | \
        grep -v \
             -e 'PHD2:$' \
             -e '@executable_path/\.\./Frameworks/' \
             -e '/usr/lib/.*\.dylib' \
             -e /System/Library/Frameworks/ \
             || :
    )
    if [[ $grep_output ]]; then
        echo "Unexpected dylib dependency!" >&2
        echo "$grep_output" >&2
        exit 1
    fi
)

do_cleanup=
branch=
use_worktree=

while getopts "b:cw:" o; do
    case "${o}" in
        b) branch=$OPTARG ;;
        c) do_cleanup=1 ;;
        w) use_worktree=$OPTARG ;;
    esac
done
shift $((OPTIND - 1))

if [[ $do_cleanup ]]; then
     if [[ ! $use_worktree ]]; then
         echo "a worktree is required to cleanup" >&2
         exit 1
     fi
else
    if [[ $use_worktree && ! $branch ]]; then
        echo "a branch is required to use a worktree" >&2
        exit 1
    fi
fi

set -x
set -e

SCRIPT_DIR=$(cd $(dirname "$0"); /bin/pwd)

# run from the top of the source tree (this script is in <top>/build/)
cd "$SCRIPT_DIR"/..

if [[ $use_worktree ]]; then
    worktree=../$use_worktree
    if [[ $do_cleanup ]]; then
        git worktree remove --force "$worktree"
        exit
    fi
    git fetch -q origin
    git worktree add --force "$worktree" "$branch"
    cd "$worktree"
fi

os=$(IFS=. read -r a b _ < <(sysctl -n kern.osproductversion); printf "%03d" "$a" "$b")

sonoma=014000

suffix=
if [[ $os > $sonoma || $os == $sonoma ]]; then
    suffix=-sonoma+
fi

V=$(perl -ne '
 /^\s*#\s*define\s+PHDVERSION[^"]+"([^"]*)/ && do { $v = $1; next LINE };
 /^\s*#\s*define\s+PHDSUBVER[^"]+"([^"]*)/ && do { $s = $1; print "$v$s"; exit }' src/phd.h)

[[ $V ]] || {
    echo "could not get version from phd.h!" >&2
    exit 1
}
ZIPFILE=PHD2-${V}-OSX-64${suffix}.zip

./run_cmake-osx

cd tmp

rm -rf PHD2.app

# worakaround for infrequent intermittent build failure when
# translations are built in parallel -- build the translations
# sequentially before runnning the rest of the build in parallel
translation_targets=()
while read -r locale; do
    translation_targets+=("${locale}_translation")
done < <(
    find ../locale -name messages.po | awk -F/ '{print $3}'
)
make "${translation_targets[@]}"
cores=$(sysctl -n hw.logicalcpu)
make -j$cores

check_library_dependencies

# make sure tests all pass
ctest

zip -r "$ZIPFILE" PHD2.app
chmod 644 "$ZIPFILE"
